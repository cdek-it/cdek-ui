name: üîÑ Sync Status from Hub

on:
  issues:
    types: [closed, reopened, labeled, unlabeled]
  issue_comment:
    types: [created, edited]

jobs:
  sync-from-hub:
    runs-on: ubuntu-latest
    steps:
      - name: Check if from Satellite and sync status
        uses: actions/github-script@v7
        env:
          HUB_PAT: ${{ secrets.ADD_TO_PROJECT_PAT }}
        with:
          script: |
            const { issue, label, comment } = context.payload;

            // –î–ª—è —Å–æ–±—ã—Ç–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ hub issue
            if (context.eventName === 'issue_comment') {
              const issueForComment = context.payload.issue;
              
              // –ò—â–µ–º satellite —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –Ω–æ–º–µ—Ä issue –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
              const satelliteRepoMatch = issueForComment.body.match(/Satellite.*`([^`]+)`/);
              const satelliteIssueMatch = issueForComment.body.match(/Issue.*#(\d+)/);
              
              if (!satelliteRepoMatch || !satelliteIssueMatch) {
                console.log('‚ùå Satellite repo or issue reference not found in hub issue');
                return;
              }
              
              const satelliteRepo = satelliteRepoMatch[1];
              const satelliteIssueNumber = parseInt(satelliteIssueMatch[1]);
              
              await syncCommentToSatellite(comment, issueForComment, satelliteIssueNumber, satelliteRepo);
              return;
            }
            
            // –ò—â–µ–º satellite —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –Ω–æ–º–µ—Ä issue –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ hub issue
            const satelliteRepoMatch = issue.body.match(/Satellite.*`([^`]+)`/);
            const satelliteIssueMatch = issue.body.match(/Issue.*#(\d+)/);
            
            if (!satelliteRepoMatch || !satelliteIssueMatch) {
              console.log('‚ùå Satellite repo or issue reference not found');
              return;
            }
            
            const satelliteRepo = satelliteRepoMatch[1];
            const satelliteIssueNumber = parseInt(satelliteIssueMatch[1]);
            const satelliteOwner = '${{ github.repository_owner }}';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–µ–π–±–ª–æ–≤
            if (context.eventName === 'issues' && (context.payload.action === 'labeled' || context.payload.action === 'unlabeled')) {
              await syncLabelsToSatellite(issue, satelliteIssueNumber, satelliteOwner, satelliteRepo, label);
            }
            
            await syncStatusToSatellite(issue, satelliteIssueNumber, satelliteOwner, satelliteRepo);
            
            async function syncStatusToSatellite(hubIssue, satelliteIssueNumber, satelliteOwner, satelliteRepo) {
              let status = '';
              let statusMessage = '';
              let shouldReopen = false;
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ª–µ–π–±–ª–æ–≤
              if (hubIssue.state === 'closed') {
                status = 'closed';
                statusMessage = '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤ Hub';
              } else if (hubIssue.state === 'open') {
                // –ï—Å–ª–∏ issue –±—ã–ª–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∞ (reopened)
                if (context.payload.action === 'reopened') {
                  status = 'open';
                  statusMessage = 'üîÑ –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–æ –≤ Hub';
                  shouldReopen = true;
                } else {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–µ–π–±–ª–∞ status/in-progress
                  const hasInProgressLabel = hubIssue.labels.some(label => label.name === 'status/in-progress');
                  if (hasInProgressLabel) {
                    status = 'status/in-progress';
                    statusMessage = 'üîß –í —Ä–∞–±–æ—Ç–µ';
                  } else {
                    status = 'open';
                    statusMessage = 'üìã –û—Ç–∫—Ä—ã—Ç–æ –≤ Hub';
                  }
                }
              }
              
              if (!status) return;
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Satellite
              await updateSatelliteStatus(satelliteIssueNumber, status, statusMessage, hubIssue, satelliteOwner, satelliteRepo, shouldReopen);
            }
            
            async function syncLabelsToSatellite(hubIssue, satelliteIssueNumber, satelliteOwner, satelliteRepo, changedLabel) {
              try {
                const syncPrefixes = ['status/', 'priority/', 'area/', 'type/'];
                const changedLabelName = changedLabel?.name;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –ª–µ–π–±–ª –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—ã–º
                const shouldSync = syncPrefixes.some(prefix => changedLabelName?.startsWith(prefix));
                if (!shouldSync) {
                  console.log('‚ÑπÔ∏è Label not in sync scope: ' + changedLabelName);
                  return;
                }
                
                console.log('üîÑ Syncing label: ' + changedLabelName);
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–µ–π–±–ª—ã hub issue
                const currentLabels = hubIssue.labels.map(l => l.name);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ª–µ–π–±–ª—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ - –±–µ—Ä–µ–º –í–°–ï –ª–µ–π–±–ª—ã —Å –Ω—É–∂–Ω—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
                const labelsToSync = currentLabels.filter(labelName => 
                  syncPrefixes.some(prefix => labelName.startsWith(prefix))
                );
                
                console.log('üìã All labels to sync from hub: ' + labelsToSync.join(', '));
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–µ–π–±–ª—ã satellite issue –∏—Å–ø–æ–ª—å–∑—É—è PAT
                const satelliteIssueResponse = await fetch(
                  `https://api.github.com/repos/${satelliteOwner}/${satelliteRepo}/issues/${satelliteIssueNumber}`,
                  {
                    headers: {
                      'Authorization': `token ${process.env.HUB_PAT}`,
                      'Accept': 'application/vnd.github.v3+json'
                    }
                  }
                );
                
                if (!satelliteIssueResponse.ok) {
                  throw new Error(`Failed to get satellite issue: ${satelliteIssueResponse.status}`);
                }
                
                const satelliteIssue = await satelliteIssueResponse.json();
                const currentSatelliteLabels = satelliteIssue.labels.map(l => l.name);
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ª–µ–π–±–ª—ã –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ satellite
                const labelsToRemove = [];
                
                // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –ª–µ–π–±–ª –≤ satellite –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å hub
                for (const prefix of syncPrefixes) {
                  const hubLabelForPrefix = labelsToSync.find(label => label.startsWith(prefix));
                  const satelliteLabelForPrefix = currentSatelliteLabels.find(label => label.startsWith(prefix));
                  
                  // –ï—Å–ª–∏ –≤ satellite –µ—Å—Ç—å –ª–µ–π–±–ª —ç—Ç–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞, –Ω–æ –≤ hub –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –¥—Ä—É–≥–æ–π - —É–¥–∞–ª—è–µ–º
                  if (satelliteLabelForPrefix && satelliteLabelForPrefix !== hubLabelForPrefix) {
                    labelsToRemove.push(satelliteLabelForPrefix);
                  }
                }
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–µ–π–±–ª—ã –∏–∑ satellite
                for (const labelToRemove of labelsToRemove) {
                  await fetch(
                    `https://api.github.com/repos/${satelliteOwner}/${satelliteRepo}/issues/${satelliteIssueNumber}/labels/${encodeURIComponent(labelToRemove)}`,
                    {
                      method: 'DELETE',
                      headers: {
                        'Authorization': `token ${process.env.HUB_PAT}`,
                        'Accept': 'application/vnd.github.v3+json'
                      }
                    }
                  );
                  console.log('üóëÔ∏è Removed label from Satellite: ' + labelToRemove);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ª–µ–π–±–ª—ã (—Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ satellite)
                const labelsToAdd = labelsToSync.filter(labelName => 
                  !currentSatelliteLabels.includes(labelName)
                );
                
                if (labelsToAdd.length > 0) {
                  await fetch(
                    `https://api.github.com/repos/${satelliteOwner}/${satelliteRepo}/issues/${satelliteIssueNumber}/labels`,
                    {
                      method: 'POST',
                      headers: {
                        'Authorization': `token ${process.env.HUB_PAT}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/vnd.github.v3+json'
                      },
                      body: JSON.stringify(labelsToAdd)
                    }
                  );
                  console.log('‚úÖ Added labels to Satellite: ' + labelsToAdd.join(', '));
                }
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–µ–π–±–ª–æ–≤
                if (labelsToRemove.length > 0 || labelsToAdd.length > 0) {
                  const commentBody = '**üè∑Ô∏è –õ–µ–π–±–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ Hub**\n\n' +
                                    '**Hub**: `project-hub`\n' +
                                    '**Issue**: [#' + hubIssue.number + '](' + hubIssue.html_url + ')\n' +
                                    '**–í—Ä–µ–º—è**: ' + new Date().toLocaleString() + '\n\n';
                  
                  const commentLines = [];
                  
                  if (labelsToAdd.length > 0) {
                    commentLines.push('**–î–æ–±–∞–≤–ª–µ–Ω—ã**: `' + labelsToAdd.join('`, `') + '`');
                  }
                  
                  if (labelsToRemove.length > 0) {
                    commentLines.push('**–£–¥–∞–ª–µ–Ω—ã**: `' + labelsToRemove.join('`, `') + '`');
                  }
                  
                  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–µ–π–±–ª–∞—Ö
                  const currentSyncInfo = [];
                  for (const prefix of syncPrefixes) {
                    const labelForPrefix = labelsToSync.find(label => label.startsWith(prefix));
                    if (labelForPrefix) {
                      currentSyncInfo.push(`**${prefix}**: \`${labelForPrefix}\``);
                    }
                  }
                  
                  if (currentSyncInfo.length > 0) {
                    commentLines.push('**–¢–µ–∫—É—â–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–µ–π–±–ª—ã**:\n' + currentSyncInfo.join('\n'));
                  }
                }
                
                console.log(`‚úÖ Synced labels to Satellite #${satelliteIssueNumber}`);
                
              } catch (error) {
                console.log(`‚ùå Failed to sync labels to Satellite: ${error.message}`);
              }
            }

            async function syncCommentToSatellite(hubComment, hubIssue, satelliteIssueNumber, satelliteRepo) {
              try {
                console.log('üí¨ Syncing comment to Satellite');
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç –±–æ—Ç–æ–≤ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if (hubComment.user.type === 'Bot' || 
                    hubComment.body.includes('üîÑ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω') ||
                    hubComment.body.includes('üè∑Ô∏è –õ–µ–π–±–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã') ||
                    hubComment.body.includes('‚úÖ –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–∞') ||
                    hubComment.body.includes('üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ Satellite')) {
                  console.log('‚ÑπÔ∏è Skipping bot or system comment');
                  return;
                }
                
                const satelliteOwner = '${{ github.repository_owner }}';
                
                const commentBody = '**üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ Hub**\n\n' +
                                    '**Hub**: `project-hub`\n' +
                                    '**Issue**: [#' + hubIssue.number + '](' + hubIssue.html_url + ')\n' +
                                    '**–ê–≤—Ç–æ—Ä**: @' + hubComment.user.login + '\n' +
                                    '**–í—Ä–µ–º—è**: ' + new Date(hubComment.created_at).toLocaleString() + '\n\n' +
                                    '---\n\n' +
                                    hubComment.body + '\n\n' +
                                    '---\n\n' +
                                    '*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*';
                
                const response = await fetch(
                  `https://api.github.com/repos/${satelliteOwner}/${satelliteRepo}/issues/${satelliteIssueNumber}/comments`,
                  {
                    method: 'POST',
                    headers: {
                      'Authorization': `token ${process.env.HUB_PAT}`,
                      'Content-Type': 'application/json',
                      'Accept': 'application/vnd.github.v3+json'
                    },
                    body: JSON.stringify({
                      body: commentBody
                    })
                  }
                );
                
                if (!response.ok) {
                  throw new Error(`Failed to create comment in satellite: ${response.status}`);
                }
                
                console.log(`‚úÖ Synced comment to Satellite #${satelliteIssueNumber}`);
                
              } catch (error) {
                console.log(`‚ùå Failed to sync comment to Satellite: ${error.message}`);
              }
            }
            
            async function updateSatelliteStatus(satelliteIssueNumber, status, statusMessage, hubIssue, satelliteOwner, satelliteRepo, shouldReopen = false) {
              try {
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ Satellite
                const statusLabels = {
                  'in-progress': 'status/in-progress'
                };
                
                const newStatusLabel = statusLabels[status];
                if (newStatusLabel) {
                  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–µ–π–±–ª—ã satellite issue
                  const satelliteIssueResponse = await fetch(
                    `https://api.github.com/repos/${satelliteOwner}/${satelliteRepo}/issues/${satelliteIssueNumber}`,
                    {
                      headers: {
                        'Authorization': `token ${process.env.HUB_PAT}`,
                        'Accept': 'application/vnd.github.v3+json'
                      }
                    }
                  );
                  
                  if (!satelliteIssueResponse.ok) {
                    throw new Error(`Failed to get satellite issue: ${satelliteIssueResponse.status}`);
                  }
                  
                  const satelliteIssue = await satelliteIssueResponse.json();
                  
                  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ –º–µ—Ç–∫–∏
                  const oldStatusLabels = satelliteIssue.labels
                    .filter(label => label.name.startsWith('status/') && label.name !== newStatusLabel)
                    .map(label => label.name);
                  
                  for (const oldLabel of oldStatusLabels) {
                    await fetch(
                      `https://api.github.com/repos/${satelliteOwner}/${satelliteRepo}/issues/${satelliteIssueNumber}/labels/${encodeURIComponent(oldLabel)}`,
                      {
                        method: 'DELETE',
                        headers: {
                          'Authorization': `token ${process.env.HUB_PAT}`,
                          'Accept': 'application/vnd.github.v3+json'
                        }
                      }
                    );
                  }
                  
                  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç—É—Å–Ω—É—é –º–µ—Ç–∫—É
                  await fetch(
                    `https://api.github.com/repos/${satelliteOwner}/${satelliteRepo}/issues/${satelliteIssueNumber}/labels`,
                    {
                      method: 'POST',
                      headers: {
                        'Authorization': `token ${process.env.HUB_PAT}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/vnd.github.v3+json'
                      },
                      body: JSON.stringify([newStatusLabel])
                    }
                  );
                }
                
                // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ Hub, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤ Satellite
                if (status === 'closed') {
                  await fetch(
                    `https://api.github.com/repos/${satelliteOwner}/${satelliteRepo}/issues/${satelliteIssueNumber}`,
                    {
                      method: 'PATCH',
                      headers: {
                        'Authorization': `token ${process.env.HUB_PAT}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/vnd.github.v3+json'
                      },
                      body: JSON.stringify({
                        state: 'closed'
                      })
                    }
                  );
                }
                
                if (shouldReopen) {
                  await fetch(
                    `https://api.github.com/repos/${satelliteOwner}/${satelliteRepo}/issues/${satelliteIssueNumber}`,
                    {
                      method: 'PATCH',
                      headers: {
                        'Authorization': `token ${process.env.HUB_PAT}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/vnd.github.v3+json'
                      },
                      body: JSON.stringify({
                        state: 'open'
                      })
                    }
                  );
                  console.log('üîì Reopened issue in Satellite');
                }
                
                console.log(`‚úÖ Synced status to Satellite #${satelliteIssueNumber}: ${status}`);
                
              } catch (error) {
                console.log(`‚ùå Failed to sync status to Satellite: ${error.message}`);
              }
            }
