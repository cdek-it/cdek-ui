name: 🔄 Sync from Hub to Satellite

on:
  issues:
    types: [closed, reopened, labeled, unlabeled, edited]
  issue_comment:
    types: [created, edited]

jobs:
  sync-to-satellite:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'state/routed')
    
    steps:
      - name: Sync status and labels to satellite
        uses: actions/github-script@v7
        env:
          SYNC_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
        with:
          script: |
            const { issue, label, comment } = context.payload;

            // Проверяем что задача маршрутизирована в satellite
            const isRouted = issue.labels.some(l => l.name === 'state/routed');
            if (!isRouted) {
              console.log('ℹ️ Issue not routed to satellite, skipping sync');
              return;
            }

            // Ищем информацию о satellite issue в комментариях
            const satelliteInfo = await findSatelliteInfoFromComments(issue.number);
            if (!satelliteInfo) {
              console.log('❌ Satellite issue reference not found in comments');
              return;
            }

            // Для событий комментариев
            if (context.eventName === 'issue_comment') {
              await syncCommentToSatellite(comment, issue, satelliteInfo);
              return;
            }

            // Синхронизация лейблов
            if (context.eventName === 'issues' && (context.payload.action === 'labeled' || context.payload.action === 'unlabeled')) {
              await syncLabelsToSatellite(issue, satelliteInfo, label);
            }

            // Синхронизация статуса
            await syncStatusToSatellite(issue, satelliteInfo);

            // Синхронизация заголовка и описания
            if (context.eventName === 'issues' && context.payload.action === 'edited') {
              await syncContentToSatellite(issue, satelliteInfo);
            }

            async function findSatelliteInfoFromComments(issueNumber) {
              try {
                // Получаем все комментарии к задаче
                const commentsResponse = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });

                const comments = commentsResponse.data;

                // Ищем комментарий с информацией о создании satellite issue
                const creationComment = comments.find(comment => 
                  comment.body.includes('✅ Задача автоматически создана в satellite') &&
                  comment.body.includes('Satellite Issue')
                );

                if (!creationComment) {
                  console.log('❌ Satellite creation comment not found');
                  return null;
                }

                // Извлекаем информацию из комментария
                const satelliteMatch = creationComment.body.match(/Satellite Issue.*#(\d+).*\((https:\/\/github\.com\/[^\/]+\/[^\/]+\/issues\/\d+)\)/);
                const satelliteRepoMatch = creationComment.body.match(/Satellite.*`([^`]+)`/);
                
                if (!satelliteMatch || !satelliteRepoMatch) {
                  console.log('❌ Could not extract satellite info from comment');
                  return null;
                }

                const satelliteIssueNumber = parseInt(satelliteMatch[1]);
                const satelliteIssueUrl = satelliteMatch[2];
                const satelliteRepo = satelliteRepoMatch[1];
                
                // Извлекаем owner и repo из URL
                const urlParts = satelliteIssueUrl.split('/');
                const satelliteOwner = urlParts[3];
                const satelliteRepoName = urlParts[4];

                return {
                  number: satelliteIssueNumber,
                  url: satelliteIssueUrl,
                  repo: satelliteRepo,
                  owner: satelliteOwner,
                  repoName: satelliteRepoName
                };

              } catch (error) {
                console.log('❌ Error searching satellite info in comments: ' + error.message);
                return null;
              }
            }

            async function syncStatusToSatellite(hubIssue, satelliteInfo) {
              try {
                let state = 'open';

                if (hubIssue.state === 'closed') {
                  state = 'closed';
                } else if (hubIssue.state === 'open' && context.payload.action === 'reopened') {
                  state = 'open';
                }

                if (!state) return;

                // Обновляем статус в satellite
                const response = await fetch(
                  `https://api.github.com/repos/${satelliteInfo.owner}/${satelliteInfo.repoName}/issues/${satelliteInfo.number}`,
                  {
                    method: 'PATCH',
                    headers: {
                      'Authorization': `token ${process.env.SYNC_TOKEN}`,
                      'Content-Type': 'application/json',
                      'Accept': 'application/vnd.github.v3+json'
                    },
                    body: JSON.stringify({
                      state: state
                    })
                  }
                );

                if (!response.ok) {
                  throw new Error(`HTTP error! status: ${response.status}`);
                }

                console.log(`✅ Synced status to Satellite ${satelliteInfo.repo}#${satelliteInfo.number}: ${state}`);

              } catch (error) {
                console.log(`❌ Failed to sync status to Satellite: ${error.message}`);
              }
            }

            async function syncLabelsToSatellite(hubIssue, satelliteInfo, changedLabel) {
              try {
                const syncPrefixes = ['status/', 'priority/', 'area/', 'type/'];
                const changedLabelName = changedLabel?.name;

                // Проверяем, относится ли измененный лейбл к синхронизируемым
                const shouldSync = syncPrefixes.some(prefix => changedLabelName?.startsWith(prefix));
                if (!shouldSync) {
                  console.log('ℹ️ Label not in sync scope: ' + changedLabelName);
                  return;
                }

                console.log('🔄 Syncing label to satellite: ' + changedLabelName);

                // Получаем текущие лейблы hub issue
                const currentHubLabels = hubIssue.labels.map(l => l.name);

                // Фильтруем лейблы для синхронизации
                const labelsToSync = currentHubLabels.filter(labelName => 
                  syncPrefixes.some(prefix => labelName.startsWith(prefix))
                );

                console.log('📋 Labels to sync to satellite: ' + labelsToSync.join(', '));

                // Получаем текущие лейблы satellite issue
                const satelliteResponse = await fetch(
                  `https://api.github.com/repos/${satelliteInfo.owner}/${satelliteInfo.repoName}/issues/${satelliteInfo.number}`,
                  {
                    headers: {
                      'Authorization': `token ${process.env.SYNC_TOKEN}`,
                      'Accept': 'application/vnd.github.v3+json'
                    }
                  }
                );

                if (!satelliteResponse.ok) {
                  throw new Error(`Failed to get satellite issue: ${satelliteResponse.status}`);
                }

                const satelliteIssue = await satelliteResponse.json();
                const currentSatelliteLabels = satelliteIssue.labels.map(l => l.name);

                // Определяем какие лейблы нужно удалить из satellite
                const labelsToRemove = [];

                // Для каждого префикса находим текущий лейбл в hub и сравниваем с satellite
                for (const prefix of syncPrefixes) {
                  const hubLabelForPrefix = labelsToSync.find(label => label.startsWith(prefix));
                  const satelliteLabelForPrefix = currentSatelliteLabels.find(label => label.startsWith(prefix));

                  // Если в satellite есть лейбл этого префикса, но в hub его нет или он другой - удаляем
                  if (satelliteLabelForPrefix && satelliteLabelForPrefix !== hubLabelForPrefix) {
                    labelsToRemove.push(satelliteLabelForPrefix);
                  }
                }

                // Удаляем старые лейблы из satellite
                for (const labelToRemove of labelsToRemove) {
                  await fetch(
                    `https://api.github.com/repos/${satelliteInfo.owner}/${satelliteInfo.repoName}/issues/${satelliteInfo.number}/labels/${encodeURIComponent(labelToRemove)}`,
                    {
                      method: 'DELETE',
                      headers: {
                        'Authorization': `token ${process.env.SYNC_TOKEN}`,
                        'Accept': 'application/vnd.github.v3+json'
                      }
                    }
                  );
                  console.log('🗑️ Removed label from Satellite: ' + labelToRemove);
                }

                // Добавляем новые лейблы (только те, которых нет в satellite)
                const labelsToAdd = labelsToSync.filter(labelName => 
                  !currentSatelliteLabels.includes(labelName)
                );

                if (labelsToAdd.length > 0) {
                  await fetch(
                    `https://api.github.com/repos/${satelliteInfo.owner}/${satelliteInfo.repoName}/issues/${satelliteInfo.number}/labels`,
                    {
                      method: 'POST',
                      headers: {
                        'Authorization': `token ${process.env.SYNC_TOKEN}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/vnd.github.v3+json'
                      },
                      body: JSON.stringify(labelsToAdd)
                    }
                  );
                  console.log('✅ Added labels to Satellite: ' + labelsToAdd.join(', '));
                }

                console.log(`✅ Synced labels to Satellite ${satelliteInfo.repo}#${satelliteInfo.number}`);

              } catch (error) {
                console.log(`❌ Failed to sync labels to Satellite: ${error.message}`);
              }
            }

            async function syncCommentToSatellite(hubComment, hubIssue, satelliteInfo) {
              try {
                console.log('💬 Syncing comment to Satellite');

                // Пропускаем комментарии от ботов и системные комментарии
                if (hubComment.user.type === 'Bot' || 
                    hubComment.body.includes('🔄 Статус обновлен') ||
                    hubComment.body.includes('🏷️ Лейблы синхронизированы') ||
                    hubComment.body.includes('✅ Задача автоматически создана') ||
                    hubComment.body.includes('💬 Комментарий из Satellite')) {
                  console.log('ℹ️ Skipping bot or system comment');
                  return;
                }

                const commentBody = '**💬 Комментарий из Hub**\n\n' +
                                    '**Hub Issue**: [#' + hubIssue.number + '](' + hubIssue.html_url + ')\n' +
                                    '**Автор**: @' + hubComment.user.login + '\n' +
                                    '**Время**: ' + new Date(hubComment.created_at).toLocaleString() + '\n\n' +
                                    '---\n\n' +
                                    hubComment.body + '\n\n' +
                                    '---\n\n' +
                                    '*Комментарий синхронизирован автоматически*';

                const response = await fetch(
                  `https://api.github.com/repos/${satelliteInfo.owner}/${satelliteInfo.repoName}/issues/${satelliteInfo.number}/comments`,
                  {
                    method: 'POST',
                    headers: {
                      'Authorization': `token ${process.env.SYNC_TOKEN}`,
                      'Content-Type': 'application/json',
                      'Accept': 'application/vnd.github.v3+json'
                    },
                    body: JSON.stringify({
                      body: commentBody
                    })
                  }
                );

                if (!response.ok) {
                  throw new Error(`Failed to create comment in satellite: ${response.status}`);
                }

                console.log(`✅ Synced comment to Satellite ${satelliteInfo.repo}#${satelliteInfo.number}`);

              } catch (error) {
                console.log(`❌ Failed to sync comment to Satellite: ${error.message}`);
              }
            }

            async function syncContentToSatellite(hubIssue, satelliteInfo) {
              try {
                console.log('📝 Syncing content to Satellite');

                // Обновляем заголовок в satellite
                const response = await fetch(
                  `https://api.github.com/repos/${satelliteInfo.owner}/${satelliteInfo.repoName}/issues/${satelliteInfo.number}`,
                  {
                    method: 'PATCH',
                    headers: {
                      'Authorization': `token ${process.env.SYNC_TOKEN}`,
                      'Content-Type': 'application/json',
                      'Accept': 'application/vnd.github.v3+json'
                    },
                    body: JSON.stringify({
                      title: '[From Hub] ' + hubIssue.title
                    })
                  }
                );

                if (!response.ok) {
                  throw new Error(`Failed to update satellite issue: ${response.status}`);
                }

                console.log(`✅ Synced content to Satellite ${satelliteInfo.repo}#${satelliteInfo.number}`);

              } catch (error) {
                console.log(`❌ Failed to sync content to Satellite: ${error.message}`);
              }
            }
