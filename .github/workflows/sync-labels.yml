name: üîÑ Sync Labels to Satellites

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths: ['.github/labels-config.json']

jobs:
  # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
  validate-repositories:
    runs-on: ubuntu-latest
    outputs:
      valid_satellites: ${{ steps.validate.outputs.valid_satellites }}
    steps:
      - name: Validate satellite repositories
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            const satellites = ['yandex-test', 'ozon-test', 'wildberries-test'];
            const validSatellites = [];
            
            console.log('üîç Checking satellite repositories...');
            
            for (const satellite of satellites) {
              try {
                const repo = await github.rest.repos.get({
                  owner: context.repo.owner,
                  repo: satellite
                });
                console.log(`‚úÖ Found: ${satellite}`);
                validSatellites.push(satellite);
              } catch (error) {
                console.log(`‚ùå Not found or no access: ${satellite} - ${error.message}`);
              }
            }
            
            console.log(`üìä Valid satellites: ${validSatellites.join(', ')}`);
            return validSatellites;

  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–∫ –≤ Hub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
  sync-hub-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Hub
        uses: actions/checkout@v4
        
      - name: Sync labels in Hub repository
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞
            if (!fs.existsSync('./.github/labels-config.json')) {
              console.log('‚ùå labels-config.json not found');
              return;
            }
            
            const config = JSON.parse(fs.readFileSync('./.github/labels-config.json', 'utf8'));
            const labels = config.labels;
            
            console.log('üîÑ Syncing labels in Hub...');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            const allLabels = [];
            for (const category of Object.values(labels)) {
              if (Array.isArray(category)) {
                allLabels.push(...category);
              }
            }
            
            console.log(`Found ${allLabels.length} labels in config`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∫–∏ –≤ Hub
            const existingLabels = await github.paginate(
              github.rest.issues.listLabelsForRepo,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              }
            );
            
            const existingLabelNames = existingLabels.map(label => label.name);
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –≤ Hub
            let hubCreated = 0;
            let hubUpdated = 0;
            
            for (const labelDef of allLabels) {
              try {
                if (existingLabelNames.includes(labelDef.name)) {
                  await github.rest.issues.updateLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: labelDef.name,
                    color: labelDef.color,
                    description: labelDef.description || ''
                  });
                  hubUpdated++;
                } else {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: labelDef.name,
                    color: labelDef.color,
                    description: labelDef.description || ''
                  });
                  hubCreated++;
                }
              } catch (error) {
                console.log(`‚ùå Error with ${labelDef.name} in Hub: ${error.message}`);
              }
            }
            
            console.log(`üéâ Hub sync completed! Created: ${hubCreated}, Updated: ${hubUpdated}`);

  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–∫ –≤ Satellite —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
  sync-satellite-labels:
    runs-on: ubuntu-latest
    needs: [validate-repositories, sync-hub-labels]
    strategy:
      matrix:
        satellite: ${{ fromJSON(needs.validate-repositories.outputs.valid_satellites) }}
    
    steps:
      - name: Checkout Hub
        uses: actions/checkout@v4
        
      - name: Sync labels to ${{ matrix.satellite }}
        uses: actions/github-script@v7
        env:
          TARGET_REPO: ${{ matrix.satellite }}
        with:
          script: |
            const fs = require('fs');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞
            if (!fs.existsSync('./.github/labels-config.json')) {
              console.log('‚ùå labels-config.json not found');
              return;
            }
            
            const config = JSON.parse(fs.readFileSync('./.github/labels-config.json', 'utf8'));
            
            console.log(`üîÑ Syncing labels to ${process.env.TARGET_REPO}...`);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            const allLabels = [];
            for (const category of Object.values(config.labels)) {
              if (Array.isArray(category)) {
                allLabels.push(...category);
              }
            }
            
            try {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
              await github.rest.repos.get({
                owner: context.repo.owner,
                repo: process.env.TARGET_REPO
              });
              
              console.log(`‚úÖ Access confirmed to ${process.env.TARGET_REPO}`);
              
              // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∫–∏ –≤ satellite
              const existingLabels = await github.paginate(
                github.rest.issues.listLabelsForRepo,
                {
                  owner: context.repo.owner,
                  repo: process.env.TARGET_REPO,
                  per_page: 100
                }
              );
              
              const existingLabelNames = existingLabels.map(label => label.name);
              
              // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –≤ satellite
              let created = 0;
              let updated = 0;
              let errors = 0;
              
              for (const labelDef of allLabels) {
                try {
                  if (existingLabelNames.includes(labelDef.name)) {
                    await github.rest.issues.updateLabel({
                      owner: context.repo.owner,
                      repo: process.env.TARGET_REPO,
                      name: labelDef.name,
                      color: labelDef.color,
                      description: labelDef.description || ''
                    });
                    updated++;
                  } else {
                    await github.rest.issues.createLabel({
                      owner: context.repo.owner,
                      repo: process.env.TARGET_REPO,
                      name: labelDef.name,
                      color: labelDef.color,
                      description: labelDef.description || ''
                    });
                    created++;
                  }
                } catch (error) {
                  errors++;
                  console.log(`‚ö†Ô∏è  Error with ${labelDef.name}: ${error.message}`);
                }
              }
              
              console.log(`üéâ ${process.env.TARGET_REPO} sync completed! Created: ${created}, Updated: ${updated}, Errors: ${errors}`);
              
            } catch (error) {
              console.log(`‚ùå Cannot access ${process.env.TARGET_REPO}: ${error.message}`);
              console.log('üí° Solution: Check if repository exists and workflow has access rights');
            }

  # –û—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  generate-sync-report:
    runs-on: ubuntu-latest
    needs: [validate-repositories, sync-hub-labels, sync-satellite-labels]
    steps:
      - name: Create synchronization report
        uses: actions/github-script@v7
        with:
          script: |
            const validSatellites = ${{ needs.validate-repositories.outputs.valid_satellites }} || [];
            const now = new Date().toLocaleString();
            const triggerType = context.payload.head_commit ? 'Code push' : 'Manual trigger';
            
            let report = `# üè∑Ô∏è Labels Synchronization Report

            **Generated**: ${now}
            **Triggered by**: ${triggerType}
            
            ## üìä Sync Status
            
            ### Hub Repository
            - ‚úÖ Labels synchronized successfully
            - Repository: ${context.repo.owner}/${context.repo.repo}
            
            `;
            
                        if (validSatellites.length > 0) {
                          report += `### Satellite Repositories\n\n`;
                          validSatellites.forEach(satellite => {
                            report += `#### ${satellite}\n`;
                            report += `- ‚úÖ Labels synchronized successfully\n`;
                            report += `- Repository: ${context.repo.owner}/${satellite}\n\n`;
                          });
                        } else {
                          report += `### ‚ùå No valid satellite repositories found\n`;
                          report += `Please check repository names and access permissions.\n\n`;
                        }
            
                        report += `## üîÑ Next Steps
            - All labels are now consistent across available repositories
            - New issues will use the synchronized labels
            - To modify labels, update \`.github/labels-config.json\` in Hub

# ---

# _This report was automatically generated by GitHub Actions_`;

#             await github.rest.issues.create({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               title: `üè∑Ô∏è Labels Sync Report - ${new Date().toLocaleDateString()}`,
#               body: report,
#               labels: ['automated', 'labels-sync', 'report']
#             });

#             console.log('üìä Sync report created successfully!');
