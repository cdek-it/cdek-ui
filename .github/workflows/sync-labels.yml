name: üîÑ Sync Labels to Satellites

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths: ['.github/labels-config.json']

jobs:
  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–∫ –≤ Hub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
  sync-hub-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Hub
        uses: actions/checkout@v4
        
      - name: Sync labels in Hub repository
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('./.github/labels-config.json')) {
              console.log('‚ùå labels-config.json not found');
              return;
            }
            
            const config = JSON.parse(fs.readFileSync('./.github/labels-config.json', 'utf8'));
            
            console.log('üîÑ Syncing labels in Hub repository...');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            const allLabels = [];
            for (const category of Object.values(config.labels)) {
              if (Array.isArray(category)) {
                allLabels.push(...category);
              }
            }
            
            console.log(`üìã Processing ${allLabels.length} labels...`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∫–∏ –≤ Hub
            const existingLabels = await github.paginate(
              github.rest.issues.listLabelsForRepo,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              }
            );
            
            const existingLabelNames = existingLabels.map(label => label.name);
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –≤ Hub
            let created = 0;
            let updated = 0;
            
            for (const labelDef of allLabels) {
              try {
                if (existingLabelNames.includes(labelDef.name)) {
                  await github.rest.issues.updateLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: labelDef.name,
                    color: labelDef.color,
                    description: labelDef.description || ''
                  });
                  updated++;
                  console.log(`üîÅ Updated: ${labelDef.name}`);
                } else {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: labelDef.name,
                    color: labelDef.color,
                    description: labelDef.description || ''
                  });
                  created++;
                  console.log(`‚úÖ Created: ${labelDef.name}`);
                }
              } catch (error) {
                console.log(`‚ùå Error with ${labelDef.name}: ${error.message}`);
              }
            }
            
            console.log(`üéâ Hub sync completed! Created: ${created}, Updated: ${updated}`);

  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ Satellites (–∏—Å–ø–æ–ª—å–∑—É–µ–º PAT)
  sync-satellite-labels:
    runs-on: ubuntu-latest
    needs: sync-hub-labels
    strategy:
      matrix:
        satellite: ['yandex-test', 'ozon-test', 'wildberries-test']
    
    steps:
      - name: Checkout Hub
        uses: actions/checkout@v4
        
      - name: Sync labels to ${{ matrix.satellite }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('./.github/labels-config.json')) {
              console.log('‚ùå labels-config.json not found');
              return;
            }
            
            const config = JSON.parse(fs.readFileSync('./.github/labels-config.json', 'utf8'));
            
            console.log(`üîÑ Syncing labels to ${{ matrix.satellite }}...`);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            const allLabels = [];
            for (const category of Object.values(config.labels)) {
              if (Array.isArray(category)) {
                allLabels.push(...category);
              }
            }
            
            console.log(`üìã Processing ${allLabels.length} labels for ${{ matrix.satellite }}...`);
            
            // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Octokit –∫–ª–∏–µ–Ω—Ç–∞ —Å PAT
            const { Octokit } = require('@octokit/rest');
            const patOctokit = new Octokit({
              auth: '${{ secrets.SYNC_ACCESS_TOKEN }}'
            });
            
            try {
              // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∫–∏ –≤ satellite
              const existingLabels = await patOctokit.paginate(
                patOctokit.rest.issues.listLabelsForRepo,
                {
                  owner: context.repo.owner,
                  repo: '${{ matrix.satellite }}',
                  per_page: 100
                }
              );
              
              const existingLabelNames = existingLabels.map(label => label.name);
              
              // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
              let created = 0;
              let updated = 0;
              
              for (const labelDef of allLabels) {
                try {
                  if (existingLabelNames.includes(labelDef.name)) {
                    await patOctokit.rest.issues.updateLabel({
                      owner: context.repo.owner,
                      repo: '${{ matrix.satellite }}',
                      name: labelDef.name,
                      color: labelDef.color,
                      description: labelDef.description || ''
                    });
                    updated++;
                    console.log(`üîÅ Updated in ${{ matrix.satellite }}: ${labelDef.name}`);
                  } else {
                    await patOctokit.rest.issues.createLabel({
                      owner: context.repo.owner,
                      repo: '${{ matrix.satellite }}',
                      name: labelDef.name,
                      color: labelDef.color,
                      description: labelDef.description || ''
                    });
                    created++;
                    console.log(`‚úÖ Created in ${{ matrix.satellite }}: ${labelDef.name}`);
                  }
                } catch (error) {
                  console.log(`‚ùå Error with ${labelDef.name} in ${{ matrix.satellite }}: ${error.message}`);
                }
              }
              
              console.log(`üéâ ${{ matrix.satellite }} sync completed! Created: ${created}, Updated: ${updated}`);
              
            } catch (error) {
              console.log(`üí• Failed to sync ${{ matrix.satellite }}: ${error.message}`);
            }
