name: üîÑ Sync Labels to Satellites

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths: ['.github/labels-config.json']

jobs:
  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–∫ –≤ Hub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
  sync-hub-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Hub
        uses: actions/checkout@v4
        
      - name: Sync labels in Hub repository
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('./.github/labels-config.json')) {
              console.log('‚ùå labels-config.json not found');
              return;
            }
            
            const config = JSON.parse(fs.readFileSync('./.github/labels-config.json', 'utf8'));
            
            console.log('üîÑ Syncing labels in Hub repository...');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            const allLabels = [];
            for (const category of Object.values(config.labels)) {
              if (Array.isArray(category)) {
                allLabels.push(...category);
              }
            }
            
            console.log(`üìã Processing ${allLabels.length} labels...`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∫–∏ –≤ Hub
            const existingLabels = await github.paginate(
              github.rest.issues.listLabelsForRepo,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              }
            );
            
            const existingLabelNames = existingLabels.map(label => label.name);
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –≤ Hub
            let created = 0;
            let updated = 0;
            
            for (const labelDef of allLabels) {
              try {
                if (existingLabelNames.includes(labelDef.name)) {
                  await github.rest.issues.updateLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: labelDef.name,
                    color: labelDef.color,
                    description: labelDef.description || ''
                  });
                  updated++;
                  console.log(`üîÅ Updated: ${labelDef.name}`);
                } else {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: labelDef.name,
                    color: labelDef.color,
                    description: labelDef.description || ''
                  });
                  created++;
                  console.log(`‚úÖ Created: ${labelDef.name}`);
                }
              } catch (error) {
                console.log(`‚ùå Error with ${labelDef.name}: ${error.message}`);
              }
            }
            
            console.log(`üéâ Hub sync completed! Created: ${created}, Updated: ${updated}`);

  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ Satellites
  sync-satellite-labels:
    runs-on: ubuntu-latest
    needs: sync-hub-labels
    strategy:
      matrix:
        satellite: ['yandex-test', 'ozon-test', 'wildberries-test', 'wordpress', 'cdek-it.github.io', 'xstate-json-types', 'widget', 'sdk2.0', 'opencart', 'react-ui-kit', 'vue-ui-kit', 'yandex', 'ozon', 'wildberries', 'react-native-ui-kit', 'angular-ui-kit']
    
    steps:
      - name: Checkout Hub
        uses: actions/checkout@v4
        
      - name: Sync labels to ${{ matrix.satellite }}
        uses: actions/github-script@v7
        env:
          HUB_PAT: ${{ secrets.ADD_TO_PROJECT_PAT }}
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('./.github/labels-config.json')) {
              console.log('‚ùå labels-config.json not found');
              return;
            }
            
            const config = JSON.parse(fs.readFileSync('./.github/labels-config.json', 'utf8'));
            
            console.log(`üîÑ Syncing labels to ${{ matrix.satellite }}...`);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            const allLabels = [];
            for (const category of Object.values(config.labels)) {
              if (Array.isArray(category)) {
                allLabels.push(...category);
              }
            }
            
            console.log(`üìã Processing ${allLabels.length} labels for ${{ matrix.satellite }}...`);
            
            try {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º actions/github-script —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
              // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å PAT —Ç–æ–∫–µ–Ω–æ–º
              const response = await fetch(`https://api.github.com/repos/${context.repo.owner}/${{ matrix.satellite }}/labels?per_page=100`, {
                method: 'GET',
                headers: {
                  'Authorization': `token ${process.env.HUB_PAT}`,
                  'Accept': 'application/vnd.github.v3+json',
                  'User-Agent': 'GitHub-Label-Sync'
                }
              });
              
              if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
              }
              
              const existingLabels = await response.json();
              const existingLabelNames = existingLabels.map(label => label.name);
              
              let created = 0;
              let updated = 0;
              let skipped = 0;
              let failed = 0;
              
              // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
              for (const labelDef of allLabels) {
                try {
                  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º satellite/ –ª–µ–π–±–ª—ã
                  if (labelDef.name.startsWith('satellite/')) {
                    skipped++;
                    console.log(`‚è≠Ô∏è Skipped satellite label: ${labelDef.name}`);
                    continue;
                  }
                  
                  const labelData = {
                    name: labelDef.name,
                    color: labelDef.color || 'ededed', // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ü–≤–µ—Ç –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                    description: labelDef.description || ''
                  };
                  
                  // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è type/ –ª–µ–π–±–ª–æ–≤
                  const isTypeLabel = labelDef.name.startsWith('type/');
                  if (isTypeLabel) {
                    console.log(`üîç Processing type label: ${labelDef.name}`);
                    console.log(`   Color: ${labelData.color}, Description: ${labelData.description}`);
                  }
                  
                  if (existingLabelNames.includes(labelDef.name)) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–µ—Ç–∫—É
                    const updateResponse = await fetch(`https://api.github.com/repos/${context.repo.owner}/${{ matrix.satellite }}/labels/${encodeURIComponent(labelDef.name)}`, {
                      method: 'PATCH',
                      headers: {
                        'Authorization': `token ${process.env.HUB_PAT}`,
                        'Accept': 'application/vnd.github.v3+json',
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify(labelData)
                    });
                    
                    if (updateResponse.ok) {
                      updated++;
                      if (isTypeLabel) {
                        console.log(`‚úÖ Successfully updated type label: ${labelDef.name}`);
                      } else {
                        console.log(`üîÅ Updated in ${{ matrix.satellite }}: ${labelDef.name}`);
                      }
                    } else {
                      const errorText = await updateResponse.text();
                      throw new Error(`HTTP ${updateResponse.status}: ${errorText}`);
                    }
                  } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É
                    const createResponse = await fetch(`https://api.github.com/repos/${context.repo.owner}/${{ matrix.satellite }}/labels`, {
                      method: 'POST',
                      headers: {
                        'Authorization': `token ${process.env.HUB_PAT}`,
                        'Accept': 'application/vnd.github.v3+json',
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify(labelData)
                    });
                    
                    if (createResponse.ok) {
                      created++;
                      if (isTypeLabel) {
                        console.log(`‚úÖ Successfully created type label: ${labelDef.name}`);
                      } else {
                        console.log(`‚úÖ Created in ${{ matrix.satellite }}: ${labelDef.name}`);
                      }
                    } else {
                      const errorText = await createResponse.text();
                      throw new Error(`HTTP ${createResponse.status}: ${errorText}`);
                    }
                  }
                  
                  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limits
                  await new Promise(resolve => setTimeout(resolve, 100));
                  
                } catch (error) {
                  failed++;
                  console.log(`‚ùå Error with ${labelDef.name} in ${{ matrix.satellite }}: ${error.message}`);
                  
                  // –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è type/ –ª–µ–π–±–ª–æ–≤
                  if (labelDef.name.startsWith('type/')) {
                    console.log(`üí• TYPE LABEL FAILED: ${labelDef.name}`);
                    console.log(`   Error details: ${JSON.stringify(error, null, 2)}`);
                  }
                }
              }
              
              console.log(`üéâ ${{ matrix.satellite }} sync completed! Created: ${created}, Updated: ${updated}, Skipped: ${skipped}, Failed: ${failed}`);
              
              if (failed > 0) {
                throw new Error(`Failed to sync ${failed} labels to ${{ matrix.satellite }}`);
              }
              
            } catch (error) {
              console.log(`üí• Failed to sync ${{ matrix.satellite }}: ${error.message}`);
            }
