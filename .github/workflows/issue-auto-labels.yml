name: üè∑Ô∏è Auto Label from Config

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited]

jobs:
  auto-label:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Auto-label from labels-config.json
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –º–µ—Ç–æ–∫
            if (!fs.existsSync('./.github/labels-config.json')) {
              console.log('‚ùå labels-config.json not found');
              return;
            }
            
            const config = require('./.github/labels-config.json');
            const { issue, pull_request } = context.payload;
            const item = issue || pull_request;
            
            if (!item) return;
            
            console.log(`üîç Analyzing: "${item.title}"`);
            
            const title = item.title.toLowerCase();
            const body = item.body?.toLowerCase() || '';
            const text = title + ' ' + body;
            
            const existingLabels = item.labels.map(label => label.name);
            const labelsToAdd = new Set();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            if (config.rules && config.rules.default_labels) {
              config.rules.default_labels.forEach(label => {
                if (!existingLabels.includes(label)) {
                  labelsToAdd.add(label);
                }
              });
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ—Ç–æ–∫
            for (const [categoryName, categoryLabels] of Object.entries(config.labels)) {
              if (!Array.isArray(categoryLabels)) continue;
              
              for (const labelDef of categoryLabels) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –º–µ—Ç–∫–∞ —É–∂–µ –µ—Å—Ç—å –∏–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                if (existingLabels.includes(labelDef.name) || !labelDef.keywords) continue;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                const keywordMatches = labelDef.keywords.filter(keyword => 
                  text.includes(keyword.toLowerCase())
                ).length;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                const confidenceThreshold = config.rules?.confidence_threshold || 1;
                
                if (keywordMatches >= confidenceThreshold) {
                  console.log(`‚úÖ ${labelDef.name}: ${keywordMatches} keyword matches`);
                  labelsToAdd.add(labelDef.name);
                  
                  // –î–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ —Ç–∏–ø–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –º–µ—Ç–∫—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                  if (categoryName === 'priorities' || categoryName === 'types') {
                    break;
                  }
                }
              }
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ç–∫–∏
            const newLabels = [...labelsToAdd].filter(label => !existingLabels.includes(label));
            
            if (newLabels.length > 0) {
              console.log(`üéØ Adding labels: ${newLabels.join(', ')}`);
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: item.number,
                labels: newLabels
              });
              
              await createLabelingComment(item.number, newLabels, config);
            }
            
            async function createLabelingComment(issueNumber, newLabels, config) {
              const labelDetails = newLabels.map(label => {
                // –ù–∞—Ö–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
                for (const category of Object.values(config.labels)) {
                  if (Array.isArray(category)) {
                    const labelDef = category.find(l => l.name === label);
                    if (labelDef) {
                      return `‚Ä¢ **${label}** - ${labelDef.description}`;
                    }
                  }
                }
                return `‚Ä¢ ${label}`;
              }).join('\n');
              
              const comment = `üè∑Ô∏è **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–µ—Ç–∫–∏**:
              
# ${labelDetails}

# **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**
# - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–∑ labels-config.json
# - –ú–µ—Ç–∫–∏ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
# - –ï—Å–ª–∏ –º–µ—Ç–∫–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç - –∏–∑–º–µ–Ω–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é

# _–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${text.length} —Å–∏–º–≤–æ–ª–æ–≤_`;
              
#               await github.rest.issues.createComment({
#                 owner: context.repo.owner,
#                 repo: context.repo.repo,
#                 issue_number: issueNumber,
#                 body: comment
#               });
#             }
