name: üè∑Ô∏è Issues Auto Label

on:
  issues:
    types: [opened]

jobs:
  simple-auto-label:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Simple auto labeling
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞
            if (!fs.existsSync('./.github/labels-config.json')) {
              console.log('‚ùå labels-config.json not found');
              return;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            const config = require('./.github/labels-config.json');
            const issue = context.payload.issue;
            
            console.log('üîç Analyzing issue: ' + issue.title);
            
            const title = issue.title.toLowerCase();
            const body = issue.body ? issue.body.toLowerCase() : '';
            const text = title + ' ' + body;
            
            const existingLabels = issue.labels.map(label => label.name);
            const labelsToAdd = [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (config.rules && config.rules.default_labels) {
              config.rules.default_labels.forEach(label => {
                if (!existingLabels.includes(label)) {
                  labelsToAdd.push(label);
                }
              });
            }
            
            // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            for (const categoryName in config.labels) {
              const categoryLabels = config.labels[categoryName];
              if (Array.isArray(categoryLabels)) {
                for (const labelDef of categoryLabels) {
                  if (labelDef.keywords && !existingLabels.includes(labelDef.name)) {
                    let found = false;
                    for (const keyword of labelDef.keywords) {
                      if (text.includes(keyword.toLowerCase())) {
                        found = true;
                        break;
                      }
                    }
                    if (found && !labelsToAdd.includes(labelDef.name)) {
                      labelsToAdd.push(labelDef.name);
                      console.log('‚úÖ Added label: ' + labelDef.name);
                    }
                  }
                }
              }
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ
            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labelsToAdd
              });
              
              console.log('üéØ Labels applied: ' + labelsToAdd.join(', '));
              
              // –ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: 'üè∑Ô∏è Automatically added labels: ' + labelsToAdd.map(l => '`' + l + '`').join(', ')
              });
            } else {
              console.log('‚ÑπÔ∏è No new labels to add');
            }
