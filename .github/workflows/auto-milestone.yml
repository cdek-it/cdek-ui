name: Auto Milestone Management

on:
  push:
    branches:
      - 'release/v*'
  pull_request:
    types: [opened, synchronize, reopened, labeled, edited]
  issues:
    types: [opened, edited, reopened, closed]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  manage-milestones:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Auto milestone management
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADD_TO_PROJECT_PAT }}
          script: |
            const org = context.repo.owner;
            const repo = context.repo.repo;
            const ref = context.ref || "";
            const isReleaseBranch = ref.includes("refs/heads/release/v");

            // --- üîπ 1. –°–æ–∑–¥–∞–Ω–∏–µ milestone –ø—Ä–∏ –Ω–æ–≤–æ–π —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ç–∫–µ ---
            if (context.eventName === "push" && isReleaseBranch) {
              const version = ref.split("release/")[1];
              const milestoneTitle = `Release ${version}`;
              console.log(`üì¶ –°–æ–∑–¥–∞—ë–º milestone "${milestoneTitle}"`);

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ milestone
              const existing = await github.rest.issues.listMilestones({ owner: org, repo });
              if (!existing.data.find(m => m.title === milestoneTitle)) {
                await github.rest.issues.createMilestone({
                  owner: org,
                  repo,
                  title: milestoneTitle,
                  description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ç–∫–∏ ${version}`,
                });
                console.log(`‚úÖ Milestone "${milestoneTitle}" —Å–æ–∑–¥–∞–Ω.`);
              } else {
                console.log(`‚ÑπÔ∏è Milestone "${milestoneTitle}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
              }
              return;
            }

            // --- üîπ 2. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ milestone –Ω–∞ Issue/PR ---
            const item = context.payload.issue || context.payload.pull_request;
            if (!item) return;

            const branches = ["head", "base"]
              .map(key => item[key]?.ref)
              .filter(Boolean);

            const releaseBranch = branches.find(b => b.startsWith("release/v"));
            if (!releaseBranch) {
              console.log("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–µ–ª–∏–∑–Ω–∞—è –≤–µ—Ç–∫–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.");
              return;
            }

            const version = releaseBranch.split("release/")[1];
            const milestoneTitle = `Release ${version}`;

            const milestones = await github.rest.issues.listMilestones({ owner: org, repo });
            const milestone = milestones.data.find(m => m.title === milestoneTitle);

            if (!milestone) {
              console.log(`‚ö†Ô∏è Milestone "${milestoneTitle}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
              return;
            }

            console.log(`üè∑Ô∏è –ù–∞–∑–Ω–∞—á–∞–µ–º milestone "${milestoneTitle}" –¥–ª—è #${item.number}`);

            await github.rest.issues.update({
              owner: org,
              repo,
              issue_number: item.number,
              milestone: milestone.number
            });

            // --- üîπ 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ milestone ---
            const all = await github.rest.issues.listForRepo({
              owner: org,
              repo,
              milestone: milestone.number,
              state: "all"
            });

            const openIssues = all.data.filter(i => i.state === "open");
            if (openIssues.length === 0 && milestone.state !== "closed") {
              console.log(`üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–∫—Ä—ã—Ç—ã. –ó–∞–∫—Ä—ã–≤–∞–µ–º milestone "${milestoneTitle}".`);
              await github.rest.issues.updateMilestone({
                owner: org,
                repo,
                milestone_number: milestone.number,
                state: "closed"
              });
            } else {
              console.log(`üïê –û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á: ${openIssues.length}`);
            }
