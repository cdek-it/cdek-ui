name: Auto Milestone & Label Management

on:
  push:
    branches:
      - 'release/v*'
  pull_request:
    types: [opened, synchronize, reopened, labeled, edited]
  release:
    types: [published]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  manage-milestones-and-labels:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Auto milestone and label management
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADD_TO_PROJECT_PAT }}
          script: |
            const org = context.repo.owner;
            const repo = context.repo.repo;
            const ref = context.ref || "";
            const isReleaseBranch = ref.includes("refs/heads/release/v");

            // --- üîπ 1. –°–æ–∑–¥–∞–Ω–∏–µ label –ø—Ä–∏ –Ω–æ–≤–æ–π —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ç–∫–µ ---
            if (context.eventName === "push" && isReleaseBranch) {
              const version = ref.split("release/")[1];
              const labelName = `release:${version}`;
              console.log(`üè∑Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º label "${labelName}"`);

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ label
              const existingLabels = await github.rest.issues.listLabelsForRepo({ owner: org, repo });
              if (!existingLabels.data.find(l => l.name === labelName)) {
                await github.rest.issues.createLabel({
                  owner: org,
                  repo,
                  name: labelName,
                  color: "0e8a16",
                  description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ä–µ–ª–∏–∑–∞ ${version}`
                });
                console.log(`‚úÖ Label "${labelName}" —Å–æ–∑–¥–∞–Ω.`);
              } else {
                console.log(`‚ÑπÔ∏è Label "${labelName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
              }
              return;
            }

            // --- üîπ 2. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ label –Ω–∞ Pull Request ---
            if (context.eventName === "pull_request") {
              const pr = context.payload.pull_request;
              const branches = ["head", "base"]
                .map(k => pr[k]?.ref)
                .filter(Boolean);

              const releaseBranch = branches.find(b => b.startsWith("release/v"));
              if (!releaseBranch) {
                console.log("‚ÑπÔ∏è PR –Ω–µ —Å–≤—è–∑–∞–Ω —Å —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ç–∫–æ–π.");
                return;
              }

              const version = releaseBranch.split("release/")[1];
              const labelName = `release:${version}`;

              console.log(`üè∑Ô∏è –î–æ–±–∞–≤–ª—è–µ–º label "${labelName}" –∫ PR #${pr.number}`);
              await github.rest.issues.addLabels({
                owner: org,
                repo,
                issue_number: pr.number,
                labels: [labelName]
              });
              return;
            }

            // --- üîπ 3. –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–∞ ‚Äî –∑–∞–∫—Ä—ã—Ç–∏–µ milestone –∏ –ø–µ—Ä–µ–Ω–æ—Å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á ---
            if (context.eventName === "release" && context.payload.action === "published") {
              const release = context.payload.release;
              const tag = release.tag_name; // –ù–∞–ø—Ä–∏–º–µ—Ä v1.1
              const version = tag.replace(/^v/, "");
              const currentMilestoneTitle = `Release ${version}`;
              console.log(`üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞ "${tag}", –∏—â–µ–º milestone "${currentMilestoneTitle}"`);

              // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ milestone‚Äô—ã
              const milestones = await github.rest.issues.listMilestones({ owner: org, repo, state: "all" });
              const current = milestones.data.find(m => m.title === currentMilestoneTitle);
              if (!current) {
                console.log(`‚ö†Ô∏è Milestone "${currentMilestoneTitle}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                return;
              }

              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π milestone –ø–æ –≤–µ—Ä—Å–∏–∏
              const currentVersionNumber = parseFloat(version);
              const nextMilestone = milestones.data.find(m => {
                const match = m.title.match(/Release v?(\d+\.\d+)/);
                if (!match) return false;
                const v = parseFloat(match[1]);
                return v > currentVersionNumber;
              });

              console.log(`üì¶ –¢–µ–∫—É—â–∏–π milestone: ${currentMilestoneTitle}`);
              console.log(`‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π milestone: ${nextMilestone ? nextMilestone.title : "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω"}`);

              // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—É—â–µ–≥–æ milestone
              const all = await github.rest.issues.listForRepo({
                owner: org,
                repo,
                milestone: current.number,
                state: "all",
                per_page: 100
              });

              const openIssues = all.data.filter(i => i.state === "open");
              console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${openIssues.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á`);

              // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π milestone
              if (nextMilestone && openIssues.length > 0) {
                for (const issue of openIssues) {
                  await github.rest.issues.update({
                    owner: org,
                    repo,
                    issue_number: issue.number,
                    milestone: nextMilestone.number
                  });
                  console.log(`‚û°Ô∏è –ó–∞–¥–∞—á–∞ #${issue.number} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ ${nextMilestone.title}`);
                }
              }

              // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π milestone
              await github.rest.issues.updateMilestone({
                owner: org,
                repo,
                milestone_number: current.number,
                state: "closed"
              });
              console.log(`‚úÖ Milestone "${currentMilestoneTitle}" –∑–∞–∫—Ä—ã—Ç.`);
            }
