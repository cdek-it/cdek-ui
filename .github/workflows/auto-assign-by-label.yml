name: Auto-manage assignees by labels

on:
  issues:
    types: [opened, labeled, unlabeled, edited]
  pull_request:
    types: [opened, labeled, unlabeled, edited]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  assign:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ADD_TO_PROJECT_PAT }}
          fetch-depth: 1

      - name: Auto-manage assignees from label mapping
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADD_TO_PROJECT_PAT }}
          script: |
            const fs = require("fs");
            const path = require("path");

            const labelsPath = path.join(process.env.GITHUB_WORKSPACE, ".github", "labels-config.json");
            if (!fs.existsSync(labelsPath)) {
              console.log("‚ùå labels-config.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
              return;
            }

            // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ª–µ–π–±–ª–∞–º–∏
            const configData = JSON.parse(fs.readFileSync(labelsPath, "utf8"));

            // –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ label ‚Üí team
            const labelToTeam = {
              "area/design-system": "design-team",
              "area/components": "frontend-specialists",
              "area/accessibility": "a11y-experts",
              "area/performance": "performance-team",
              "area/tooling": "devops-team",
              "area/i18n": "i18n-team",
              "area/mobile": "mobile-team"
            };

            const org = context.repo.owner;
            const item = context.payload.issue || context.payload.pull_request;
            if (!item) {
              console.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω issue –∏–ª–∏ PR");
              return;
            }

            const number = item.number;
            const labels = item.labels.map(l => l.name);
            const repo = context.repo.repo;

            console.log("üè∑Ô∏è –¢–µ–∫—É—â–∏–µ –ª–µ–π–±–ª—ã:", labels.join(", "));

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∞—Å—Å–∞–π–Ω–∏
            const currentAssignees = item.assignees?.map(a => a.login) || [];
            console.log("üë§ –¢–µ–∫—É—â–∏–µ –∞—Å—Å–∞–π–Ω–∏:", currentAssignees.join(", ") || "–Ω–µ—Ç");

            // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–∏–º–∏ –ª–µ–π–±–ª–∞–º–∏
            const desiredAssignees = new Set();

            for (const label of labels) {
              const team = labelToTeam[label];
              if (!team) continue;

              try {
                const members = await github.rest.teams.listMembersInOrg({
                  org,
                  team_slug: team,
                });
                members.data.forEach(m => desiredAssignees.add(m.login));
              } catch (error) {
                console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã ${team}: ${error.message}`);
              }
            }

            console.log("‚úÖ –ñ–µ–ª–∞–µ–º—ã–µ –∞—Å—Å–∞–π–Ω–∏:", Array.from(desiredAssignees).join(", ") || "–Ω–µ—Ç");

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –∫–æ–≥–æ —É–±—Ä–∞—Ç—å
            const toAdd = Array.from(desiredAssignees).filter(a => !currentAssignees.includes(a));
            const toRemove = currentAssignees.filter(a => !desiredAssignees.has(a));

            console.log("‚ûï –î–æ–±–∞–≤–∏—Ç—å:", toAdd.join(", ") || "–Ω–µ—Ç");
            console.log("‚ûñ –£–¥–∞–ª–∏—Ç—å:", toRemove.join(", ") || "–Ω–µ—Ç");

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö
            if (toAdd.length > 0) {
              try {
                await github.rest.issues.addAssignees({
                  owner: org,
                  repo,
                  issue_number: number,
                  assignees: toAdd
                });
                console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∞—Å—Å–∞–π–Ω–∏");
              } catch (error) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—Å—Å–∞–π–Ω–∏: ${error.message}`);
              }
            }

            // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏—Ö
            if (toRemove.length > 0) {
              try {
                await github.rest.issues.removeAssignees({
                  owner: org,
                  repo,
                  issue_number: number,
                  assignees: toRemove
                });
                console.log("‚úÖ –£–¥–∞–ª–µ–Ω—ã –Ω–µ–Ω—É–∂–Ω—ã–µ –∞—Å—Å–∞–π–Ω–∏");
              } catch (error) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Å—Å–∞–π–Ω–∏: ${error.message}`);
              }
            }
